<?xml version="1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<document>
    <properties>
        <title>Log4J 2.0 API</title>
        <author email="rgoers@apache.org">Ralph Goers</author>
    </properties>

    <body>
        <section name="Log4j 2.0 API">
          <a name="Overview"/>
          <subsection name="Overview">
            <p>
              The Log4Jj 2.0 API provides the interface that applications should code to and provides the
              adapter components required for implementers to create a logging implementation. Although Log4j 2
              is broken up between an API and an implementation, the primary purpose of doing so was not to
              allow multiple implementations, although that is certainly possible, but to clearly define
              what classes and methods are safe to use in "normal" application code.
            </p>
            <h4>Hello World!</h4>
            <p>
              No introduction would be complete without the customary Hello, World example. Here is ours. First,
              a Logger with the name "HelloWorld" is obtained from the LogManager. Next, the logger is used to
              write the "Hello, World!" message, however the message will be written only if the Logger is
              configured to allow informational messages.
            </p>
            <source>    import org.apache.logging.log4j.LogManager;
    import org.apache.logging.log4j.Logger;

    public class HelloWorld {
        private static Logger logger = LogManager.getLogger("HelloWorld");
        public static void main(String[] args) {
            logger.info("Hello, World!");
        }
    }</source>
            <p>
              The output from the call to logger.info() will vary significantly depending on the configuration
              used. See the <a href="./configuration.html">Configuration</a> section for more details.
            </p>
            <h4>Parameter Substitution</h4>
            <p>
              Frequently the purpose of logging is to provide information about what is happening in the system,
              which requires including information about the objects being manipulated. In Log4j 1.x this could
              be accomplished by doing:
            </p>
            <source>    if (logger.isDebugEnabled()) {
        logger.debug("Logging in user " + user.getName() + " with id " + user.getId());
    }</source>
            <p>
              Doing this repeatedly has the effect of making the code feel like it is more about logging than the
              actual task at hand. In addition, it results in the logging level being checked twice; once on the
              call to isDebugEnabled and once on the debug method. A better alternative would be:
            </p>
            <source>    logger.debug("Logging in user {} with id {}", user.getName(), user.getId());</source>
            <p>
              With the code above the logging level will only be checked once and the String construction will
              only occur when debug logging is enabled.
            </p>
          </subsection>
          <a name="Markers"/>
          <subsection name="Markers">

          </subsection>
          <a name="EventLogging"/>
          <subsection name="EventLogging">

          </subsection>

        </section>
    </body>
</document>