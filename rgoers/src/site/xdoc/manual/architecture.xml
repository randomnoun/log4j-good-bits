<?xml version="1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<document>
    <properties>
        <title>Overview</title>
        <author email="rgoers@apache.org">Ralph Goers</author>
    </properties>

    <body>
      <section name="Architecture">
        <subsection name="Main Components">
          <p>Log4j uses the classes shown in the diagram below.</p>
          <img src="../images/Log4jClasses.jpg" title="Log4j 2.0 Class Relationships"
              caption="Log4j 2.0 Class Relationships"/>
          <p>Applications using the Log4j 2.0 API will request a Logger with a specific name from the
          LogManager. The LogManager will locate the appropriate LoggerContext and then obtain the Logger from it.
          If the Logger must be created it will be associated with the LoggerConfig that contains either a) the
          same name as the Logger, b) the name of a parent package, or c) the root LoggerConfig. LoggerConfig
          objects are created from Logger declarations in the configuration. The LoggerConfig is associated with
          the Appenders that actually deliver the LogEvents.</p>
          <h4>Logger Hierarchy</h4>
            <p>The first and foremost advantage of any logging API over plain
              <code>System.out.println</code> resides in its ability to disable
              certain log statements while allowing others to print unhindered. This
              capability assumes that the logging space, that is, the space of all
              possible logging statements, is categorized according to some
              developer-chosen criteria.
            </p>
            <p>In Log4j 1.x the Logger Hierarchy was maintained through a relationship between Loggers.
              In Log4j 2.0 this relationship no longers exists. Instead, the hierarchy is maintained
              in the relationship between LoggerConfig objects.
            </p>

            <p>Loggers and LoggerConfigs are named entities. Logger names are case-sensitive and
              they follow the hierarchical naming rule:
            </p>

            <p>
            <table bgcolor="#EEEE99">
              <tr>
                <td>
                  <dl>
                    <dt><b>Named Hierarchy</b></dt>

                    <dd>A LoggerConfig is said to be an <em>ancestor</em> of another
                        LoggerConfig if its name followed by a dot is a prefix of the
                       <em>descendant</em> logger name. A LoggerConfig is said to be a
                       <em>parent</em> of a <em>child</em> LoggerConfig if there are no
                       ancestors between itself and the descendant LoggerConfig.
                    </dd>
                  </dl>
                </td>
              </tr>
            </table>
            </p>
            <p>For example, the LoggerConfig named <code>"com.foo"</code> is a parent
              of the LoggerConfig named <code>"com.foo.Bar"</code>.  Similarly,
              <code>"java"</code> is a parent of <code>"java.util"</code> and an
              ancestor of <code>"java.util.Vector"</code>.  This naming scheme
              should be familiar to most developers.
            </p>

            <p>The root logger resides at the top of the logger hierarchy. It
              is exceptional in that it always exists and it is part of every hierarchy. It can
              be obtained as follows:
              <source>Logger logger = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);</source>
            </p>
          <h4>LoggerContext</h4>

          <h4>Configuration</h4>

          <h4>Logger</h4>

            <h5>Log Levels</h5>

          <h4>LoggerConfig</h4>

          <h4>Filter</h4>

          <h4>Appender</h4>

          <h4>Layout</h4>

          <h4>StrSubstitutor and StrLookup</h4>

        </subsection>

      </section>
    </body>
</document>